// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

repositories {
    maven { // WAILA
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven/"
    }
    maven { // NEI, CodeChickenCore, CoreChickenLib
        name "CB Repo"
        url "http://chickenbones.net/maven/"
    }
    maven { //
        name = "Progwml Repo"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // Forge, FML
        name = "Forge Repo"
        url = "http://files.minecraftforge.net/maven/"
    }
    maven { // Guide-API
        name = "TehNut Repo"
        url = "http://tehnut.info/maven/"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

ext.configFile = file('build.properties')

ext.config = parseConfig(configFile)
ext.static = parseConfig(file('static.properties'))
ext.priv = parseConfig(file('private.properties'))

version = "${static.mcversion}-${config.version}-${config.build}"
group = "${static.package}"
archivesBaseName = "${static.archive}"

minecraft {
    version = "${static.mcversion}-${static.forgeversion}"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "${static.mappings}"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace "\${version}", project.version
    replace "\${name}", static.name
    replace "\${modid}", static.modid
    replaceIn 'Ref.java'
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    //compile "codechicken:CodeChickenLib:1.7.10-1.1.3.136:dev"
    //compile "codechicken:CodeChickenCore:1.7.10-1.0.6.43:dev"
    //compile "codechicken:NotEnoughItems:1.7.10-1.0.4.107:dev"
    //compile "mcp.mobius.waila:Waila:1.5.10_1.7.10:dev"
    //compile "info.amerifrance.guideapi:Guide-API:1.7.10-1.0.1-29:deobf"
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'modid': static.modid, 'name': static.name, 'desc': static.desc, 'version': project.version,
                'mcversion': project.minecraft.version, 'url': static.url, 'updateurl': static.updateurl, 'author':
                static.author, 'credits': static.credits, 'logo': static.logo
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

// --------------------UTILITIES---------------------

/**
 * Increments the buildnumber in your config file, and saves it
 */
task incrementBuildNumber << {
    config.build = (config.build.toString().toInteger()) + 1

    config.build = fixStringSize(config.build.toString(), 3)
    configFile.withWriter {
        config.toProperties().store(it, "")
    }
}

task specifyVersion << {
    String version = System.console().readLine("\nVersion? (${config.version})\n")
    String build = System.console().readLine("\nBuild number? (${config.build})\n")

    if (!version.isEmpty()) {
        config.version = version
    }
    if (!build.isEmpty()) {
        config.build = fixStringSize(build, 3)
    }

    configFile.withWriter {
        config.toProperties().store(it, "")
    }
}

def parseConfig(File config) {
    
    if (!config.exists()) {
        config = file('missing.properties')
    }
    
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

def String executeBash(String command) {
    String sout
    String serr

    def soutbuffer = new StringBuffer(), serrbuffer = new StringBuffer()
    def proc = command.execute()
    proc.consumeProcessOutput(soutbuffer, serrbuffer)
    proc.waitForOrKill(1000)
    sout = soutbuffer.toString(); serr = serrbuffer.toString()
    return sout
}

def String fixStringSize(String input, int wantedLength) {
    def times = wantedLength - (input.length())
    if (times > 0) {
        input = ("0" * times) + (input)
    }
    return input
}

// ----------------------TASKS---------------------------

// add a deobf jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

// !! Apparently exists already in FG 2.2 (Unless I'm wrong)
// add a source jar
//task sourceJar(type: Jar, dependsOn: "sourceMainJava") {
//    from "build/sources/java"
//    classifier = 'sources'
//}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task releaseDeobf(type: Copy, dependsOn: build) {
    from("build/libs/${deobfJar.archiveName}")
    into file("releases/${project.version}")
}
task releaseJar(type: Copy, dependsOn: build) {
    from("build/libs/${jar.archiveName}")
    into file("releases/${project.version}")
}
task releaseSource(type: Copy, dependsOn: build) {
    from("build/libs/${sourceJar.archiveName}")
    into file("releases/${project.version}")
}

task releaseJavadoc(type: Copy, dependsOn: build) {
    from("build/libs/${javadocJar.archiveName}")
    into file("releases/${project.version}")
}

task deleteOldBuilds(type: Delete) {
    delete "build"
}

task release(dependsOn: [deleteOldBuilds, releaseJar, releaseDeobf, releaseSource, releaseJavadoc, incrementBuildNumber]) {
}
task releaseBuild(dependsOn: [deleteOldBuilds, releaseJar, incrementBuildNumber]) {}

// ----------------ARTIFACTS---------------------

artifacts {
    //archives sourceJar
    archives deobfJar
    archives javadocJar
}

// -----------TASK TWEAKS------------------------

build.dependsOn deobfJar, javadocJar
compileApiJava.shouldRunAfter deleteOldBuilds

// -----------LANGUAGE LEVEL---------------------

            sourceCompatibility =             targetCompatibility = "${static.javaversion}"
compileJava.sourceCompatibility = compileJava.targetCompatibility = "${static.javaversion}"

// -----------JAR ARTIFACT-----------------------

jar {
    manifest {
        attributes 'FMLAT': "${static.modid}_at.cfg"
        attributes 'FMLCorePlugin': 'com.github.hashtagshell.enchantfood.asm.EnchantFoodPlugin'
        attributes 'FMLCorePluginContainsMod': 'true'
    }
}

// -----------IDEA DOES WEIRD STUFF SOMETIMES----


idea { module { inheritOutputDirs = true } }
